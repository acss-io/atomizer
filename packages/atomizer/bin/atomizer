#!/usr/bin/env node

/*
 * Copyright (c) 2015, Yahoo Inc. All rights reserved.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

'use strict';

process.title = 'atomizer';

var chalk = require('chalk');
var chokidar = require('chokidar');
var fs = require('fs');
var program = require('commander');
var empty = require('lodash/isEmpty');
var { buildAtomicCss, getConfig, findFiles } = require('../src/build');

function collect(val, memo) {
    memo.push(val);
    return memo;
}

program
    .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
    .usage('[options] [path]')
    .option('-R, --recursive', 'process all files recursively in the path')
    .option('-c, --config [file]', 'source config file')
    .option('-r, --rules [file]', 'custom rules file (argument may be passed multiple times)', collect, [])
    .option('-o, --outfile [file]', 'destination config file')
    .option('-n, --namespace [namespace]', 'adds the given namespace to all generated Atomic CSS selectors')
    .option('-H, --helpersNamespace [namespace]', 'adds the given namespace to all helper selectors')
    .option(
        '-w, --watch [target]',
        'rebuilds when changes are detected in the file, directory, or glob (argument may be passed multiple times and are parsed for Atomic CSS classes)',
        collect,
        []
    )
    .option('--exclude [pattern]', 'excluded file pattern', collect, [])
    .option('--rtl', 'swaps `start` and `end` keyword replacements with `right` and `left`')
    .option('--bump-mq', 'increases specificity of media queries a small amount')
    .option('--ie', '[deprecated] no longer used')
    .option('--strict', 'bail if missing configs such as breakpoints')
    .option('--verbose', 'show additional log info (warnings)')
    .option('--quiet', 'hide processing info')
    .parse(process.argv);

// Gather cli arguments and options
var programOpts = program.opts();

// Load the atomizer config file
var config = getConfig(programOpts.config);

// Print help menu if no config is loaded and no arguments are passed in
if (empty(config) && process.argv.length <= 2) {
    program.outputHelp();
    return;
}

// Collect files to parse from cli args
var filesToParse = program.args || [];

// Add more src files from "content" property of config
filesToParse = findFiles(filesToParse.concat(config.content || []));

// Run atomizer build, output to stdout if css returned
function runAtomizer(files, config = {}, options = {}, done) {
    buildAtomicCss(files, config, options, function (err, css) {
        done(err, css);
        if (css) {
            process.stdout.write(`\n${css}`);
        }
    });
}

// Used by the watcher to watch additional files
function triggerBuild(state) {
    // Ensure only one build happens at a time.
    if (state.building) {
        state.queued = true;

        return;
    }

    state.building = true;
    runAtomizer(Object.keys(state.files), config, programOpts, function (err) {
        if (err) {
            throw err;
        }
        state.building = false;
        if (state.queued) {
            state.queued = false;
            triggerBuild(state);
        }
    });
}

// Setup Watcher
if (programOpts.watch === true || programOpts.watch.length) {
    // initially watch all parsed files
    var filesToWatch = filesToParse.concat([]);

    // if passed in, add additional files from the "--watch [target]" option
    if (Array.isArray(programOpts.watch) && programOpts.watch.length) {
        filesToWatch = filesToWatch.concat(programOpts.watch);
    }

    // used for testing --watch input
    if (typeof process.env.TEST !== 'undefined') {
        console.log('Watching ' + chalk.cyan(filesToWatch.join(', ')) + ' for changes.');
        runAtomizer(filesToParse, config, programOpts, function () {});
    } else {
        var buildTriggerState = { files: {} };
        var watcher = chokidar.watch(filesToWatch);
        watcher.on('add', function (path) {
            buildTriggerState.files[path] = true;
        });
        watcher.on('unlink', function (path) {
            delete buildTriggerState.files[path];
        });
        watcher.on('ready', function () {
            triggerBuild(buildTriggerState);
            watcher.on('all', function (n, p) {
                triggerBuild(buildTriggerState);
            });
        });
    }
} else {
    runAtomizer(filesToParse, config, programOpts, function () {});
}
