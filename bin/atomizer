#!/usr/bin/env node

/*
 * Copyright (c) 2015, Yahoo Inc. All rights reserved.
 * Copyrights licensed under the New BSD License.
 * See the accompanying LICENSE file for terms.
 */

'use strict';

process.title = 'atomizer';

var chalk = require('chalk');
var fs = require('fs');
var minimatch = require('minimatch');
var path = require('path');
var program = require('commander');
var some = require('lodash/some');
var union = require('lodash/union');

var Atomizer = require('../src/atomizer');
var content = '';
var config = {};
var classnames = [];

function collect(val, memo) {
  memo.push(val);
  return memo;
}

program
  .version(JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version)
  .usage('[options] [path]')
  .option('-R, --recursive', 'process all files recursively in the path')
  .option('-c, --config [file]', 'source config file')
  .option('-r, --rules [file]', 'custom rules file (argument may be passed multiple times)', collect, [])
  .option('-o, --outfile [file]', 'destination config file')
  .option('-n, --namespace [namespace]', 'adds the given namespace to all generated Atomic CSS selectors')
  .option('-H, --helpersNamespace [namespace]', 'adds the given namespace to all helper selectors')
  .option('--exclude [pattern]', 'excluded file pattern', collect, [])
  .option('--rtl', 'swaps `start` and `end` keyword replacements with `right` and `left`')
  .option('--ie', 'adds old IE hacks to the output')
  .option('--verbose', 'show additional log info (warnings)')
  .option('--quiet', 'hide processing info')
  .parse(process.argv);

if (process.argv.length <= 2) {
    program.outputHelp();
    return;
}

var atomizer = new Atomizer({ verbose: !!program.verbose });

function warn() {
  if (!program.quiet) console.warn.apply(console, arguments);
}

function parseFiles (files, recursive, dir) {
    var classNames = [];

    for (var i=0, iLen=files.length; i < iLen; i++) {
        classNames = union(classNames, parseFile(files[i], recursive, dir));
    }

    return classNames;
}

function parseFile (file, recursive, dir) {
    var classNames = [],
        fileContents,
        filepath,
        relative,
        stat;

    if (file) {
        filepath = dir ? path.resolve(dir, file) : path.resolve(file);
        relative = path.relative(process.cwd(), filepath);
        stat = fs.statSync(filepath);

        if (stat.isFile()) {
            var isExcluded = false;
            if (program.exclude && program.exclude.length) {
              isExcluded = some(program.exclude, function excludeFile(value) {
                return minimatch(filepath, value, {matchBase: true});
              });
            }
            if (!isExcluded) {
              warn('Parsing file ' + chalk.cyan(relative) + ' for Atomic CSS classes');
              fileContents = fs.readFileSync(filepath, {encoding: 'utf-8'});
              classNames = atomizer.findClassNames(fileContents);
            } else {
              warn('Excluding file ' + chalk.cyan(relative) + ' for Atomic CSS classes');
            }
        } else if (stat.isDirectory()) {
            if (!dir || dir && recursive) {
                warn('Inspecting directory ' + chalk.cyan(path.relative(process.cwd(), filepath)));
                classNames = parseFiles(fs.readdirSync(filepath), recursive, filepath);
            }
        }
    }
    return classNames;
}

var options = {
    rtl: program.rtl
};

// Options: Namespace
if (typeof program.namespace !== 'undefined') {
    options.namespace = program.namespace;
}

// Options: Helpers Namespace
if (typeof program.helpersNamespace !== 'undefined') {
    options.helpersNamespace = program.helpersNamespace;
}

// Options: IE
if (typeof program.ie !== 'undefined') {
    options.ie = true;
}

// Custom rulesets
var rulesFiles = program.rules;
if (rulesFiles) {
    rulesFiles.forEach(function (rulesFile) {
        if (!fs.existsSync(rulesFile)) {
            throw new Error('Rule file ' + chalk.cyan(rulesFile) + ' not found.');
            return false;
        }
        warn('Adding rules from ' + chalk.cyan(rulesFile) + '.');
        atomizer.addRules(require(path.resolve(rulesFile)));
    });
}

// Static config should contain the general 'config' options, along with any
// statically defined configuration. It is required.
var configFile = program.config;
if (configFile) {
    if (!fs.existsSync(configFile)) {
        throw new Error('Configuration file ' + chalk.cyan(configFile) + ' not found.');
        return false;
    }
    config = require(path.resolve(configFile));
}

// Generate config from parsed src files

var filesToParse = program.args || [];
if (filesToParse.length) {
    classnames = parseFiles(filesToParse, !!program.recursive);
}

// Finalize the config
config = atomizer.getConfig(classnames, config);

// Create the CSS
content = atomizer.getCss(config, options);

// Output the CSS
var outfile = program.outfile;
if (outfile) {
    fs.mkdir(path.dirname(outfile), function (err) {
        // Fail silently
        fs.writeFile(path.resolve(outfile), content, function (err) {
            if (err) throw err;
            console.log('File ' + chalk.cyan(outfile) + ' created.');
        });
    });
} else {
    process.stdout.write("\n" + content);
}
